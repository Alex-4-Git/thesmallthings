#| Question 1 |#
(define (my-reverse lis)
  (define (my-sub-reverse lis1 lis2)
    (cond
      ((null? lis1) lis2)
      ((list? (car lis1))
         (my-sub-reverse (cdr lis1) 
                            (cons (my-reverse (car lis1)) lis2)
          )
       )
      (else (my-sub-reverse (cdr lis1) 
                            (cons (car lis1) lis2)
             )
       )
     )
   )
  (my-sub-reverse (cdr lis) (list (car lis)))
 )

#| Question 2 |#
(define (my-list-tail lis kint)
  (cond
    ((zero? kint) lis)
    (else (my-list-tail (cdr lis) (- kint 1))
      )
    )
  )
(define (my-list-ref lis kint)
  (cond
    ((= kint 1) (car lis))
    (else (my-list-ref (cdr lis) (- kint 1))
     )
    )
  )

#| Question 3 |#
(define (list-max lis)
  (define (maxer lis val)
    (cond
      ((null? lis) val)
      ((< val (car lis)) (maxer (cdr lis) (car lis)))
      (else (maxer (cdr lis) val))
     )
   )
  (maxer (cdr lis) (car lis))
 )

#| Question 4 |#
(define (list-remove-k lis k)
  (cond ((null? lis) '())
        ((= (car lis) k)
         (list-remove-k (cdr lis) k))
        (else
         (cons (car lis) (list-remove-k (cdr lis) k))
        )
    )
  )

#| Question 5 |#
#| NOTE: THIS FUNCTION FAILS CURRENTLY! |#
(define (list-highest-k lis k)
  (define (findmax lis4)
    (cond ((null? (cdr lis4)) (car lis4))
          ((> (car lis4) (car (cdr lis4)))
           (findmax (cons (car lis4) (cdr (cdr lis4))))
           )
          (else (findmax (cdr lis4))
           )
      )
    )
  (define (removemax lis3 val3)
    (cond ((= (car lis3) val3) (cdr lis3))
          (else (removemax (list (cdr lis3) (car lis3)) val3))
      )
    )
  (define (highest lis1 lis2 kk)
    (cond ((= kk 0) lis2)
          (else (highest (removemax lis1)
                         (cons (findmax lis1) lis2)
                         (- k 1))
           )
      )
    )
  (highest (removemax lis (findmax lis)) (cons (findmax lis) '()) (- k 1))
 )
